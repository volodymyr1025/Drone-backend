// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PDP

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PDPMetaData contains all meta data concerning the PDP contract.
var PDPMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_droneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loggerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accessGranted\",\"type\":\"bool\"}],\"name\":\"AccessEvaluated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_model_type\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_zone\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"_startTime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_endTime\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_accessGranted\",\"type\":\"bool\"}],\"name\":\"layer1EvaluateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_model_type\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_zone\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"_startTime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_endTime\",\"type\":\"string\"}],\"name\":\"layer2EvaluateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_model_type\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_zone\",\"type\":\"int256\"}],\"name\":\"layer3EvaluateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entityId\",\"type\":\"uint256\"}],\"name\":\"layer4EvaluateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drone\",\"outputs\":[{\"internalType\":\"contractDroneContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contractLoggingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"contractPolicyContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// PDPABI is the input ABI used to generate the binding from.
// Deprecated: Use PDPMetaData.ABI instead.
var PDPABI = PDPMetaData.ABI

// PDPBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PDPMetaData.Bin instead.
var PDPBin = PDPMetaData.Bin

// DeployPDP deploys a new Ethereum contract, binding an instance of PDP to it.
func DeployPDP(auth *bind.TransactOpts, backend bind.ContractBackend, _policyAddress common.Address, _droneAddress common.Address, _loggerAddress common.Address) (common.Address, *types.Transaction, *PDP, error) {
	parsed, err := PDPMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PDPBin), backend, _policyAddress, _droneAddress, _loggerAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PDP{PDPCaller: PDPCaller{contract: contract}, PDPTransactor: PDPTransactor{contract: contract}, PDPFilterer: PDPFilterer{contract: contract}}, nil
}

// PDP is an auto generated Go binding around an Ethereum contract.
type PDP struct {
	PDPCaller     // Read-only binding to the contract
	PDPTransactor // Write-only binding to the contract
	PDPFilterer   // Log filterer for contract events
}

// PDPCaller is an auto generated read-only Go binding around an Ethereum contract.
type PDPCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PDPTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PDPFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PDPSession struct {
	Contract     *PDP              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PDPCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PDPCallerSession struct {
	Contract *PDPCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PDPTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PDPTransactorSession struct {
	Contract     *PDPTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PDPRaw is an auto generated low-level Go binding around an Ethereum contract.
type PDPRaw struct {
	Contract *PDP // Generic contract binding to access the raw methods on
}

// PDPCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PDPCallerRaw struct {
	Contract *PDPCaller // Generic read-only contract binding to access the raw methods on
}

// PDPTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PDPTransactorRaw struct {
	Contract *PDPTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPDP creates a new instance of PDP, bound to a specific deployed contract.
func NewPDP(address common.Address, backend bind.ContractBackend) (*PDP, error) {
	contract, err := bindPDP(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PDP{PDPCaller: PDPCaller{contract: contract}, PDPTransactor: PDPTransactor{contract: contract}, PDPFilterer: PDPFilterer{contract: contract}}, nil
}

// NewPDPCaller creates a new read-only instance of PDP, bound to a specific deployed contract.
func NewPDPCaller(address common.Address, caller bind.ContractCaller) (*PDPCaller, error) {
	contract, err := bindPDP(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PDPCaller{contract: contract}, nil
}

// NewPDPTransactor creates a new write-only instance of PDP, bound to a specific deployed contract.
func NewPDPTransactor(address common.Address, transactor bind.ContractTransactor) (*PDPTransactor, error) {
	contract, err := bindPDP(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PDPTransactor{contract: contract}, nil
}

// NewPDPFilterer creates a new log filterer instance of PDP, bound to a specific deployed contract.
func NewPDPFilterer(address common.Address, filterer bind.ContractFilterer) (*PDPFilterer, error) {
	contract, err := bindPDP(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PDPFilterer{contract: contract}, nil
}

// bindPDP binds a generic wrapper to an already deployed contract.
func bindPDP(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PDPMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PDP *PDPRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PDP.Contract.PDPCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PDP *PDPRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PDP.Contract.PDPTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PDP *PDPRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PDP.Contract.PDPTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PDP *PDPCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PDP.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PDP *PDPTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PDP.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PDP *PDPTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PDP.Contract.contract.Transact(opts, method, params...)
}

// Drone is a free data retrieval call binding the contract method 0x8edf104b.
//
// Solidity: function drone() view returns(address)
func (_PDP *PDPCaller) Drone(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PDP.contract.Call(opts, &out, "drone")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Drone is a free data retrieval call binding the contract method 0x8edf104b.
//
// Solidity: function drone() view returns(address)
func (_PDP *PDPSession) Drone() (common.Address, error) {
	return _PDP.Contract.Drone(&_PDP.CallOpts)
}

// Drone is a free data retrieval call binding the contract method 0x8edf104b.
//
// Solidity: function drone() view returns(address)
func (_PDP *PDPCallerSession) Drone() (common.Address, error) {
	return _PDP.Contract.Drone(&_PDP.CallOpts)
}

// Logger is a free data retrieval call binding the contract method 0xf24ccbfe.
//
// Solidity: function logger() view returns(address)
func (_PDP *PDPCaller) Logger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PDP.contract.Call(opts, &out, "logger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Logger is a free data retrieval call binding the contract method 0xf24ccbfe.
//
// Solidity: function logger() view returns(address)
func (_PDP *PDPSession) Logger() (common.Address, error) {
	return _PDP.Contract.Logger(&_PDP.CallOpts)
}

// Logger is a free data retrieval call binding the contract method 0xf24ccbfe.
//
// Solidity: function logger() view returns(address)
func (_PDP *PDPCallerSession) Logger() (common.Address, error) {
	return _PDP.Contract.Logger(&_PDP.CallOpts)
}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_PDP *PDPCaller) Policy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PDP.contract.Call(opts, &out, "policy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_PDP *PDPSession) Policy() (common.Address, error) {
	return _PDP.Contract.Policy(&_PDP.CallOpts)
}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_PDP *PDPCallerSession) Policy() (common.Address, error) {
	return _PDP.Contract.Policy(&_PDP.CallOpts)
}

// Layer1EvaluateAccess is a paid mutator transaction binding the contract method 0xd8025ab4.
//
// Solidity: function layer1EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime, bool _accessGranted) returns(bool)
func (_PDP *PDPTransactor) Layer1EvaluateAccess(opts *bind.TransactOpts, _id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string, _accessGranted bool) (*types.Transaction, error) {
	return _PDP.contract.Transact(opts, "layer1EvaluateAccess", _id, _model_type, _zone, _startTime, _endTime, _accessGranted)
}

// Layer1EvaluateAccess is a paid mutator transaction binding the contract method 0xd8025ab4.
//
// Solidity: function layer1EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime, bool _accessGranted) returns(bool)
func (_PDP *PDPSession) Layer1EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string, _accessGranted bool) (*types.Transaction, error) {
	return _PDP.Contract.Layer1EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone, _startTime, _endTime, _accessGranted)
}

// Layer1EvaluateAccess is a paid mutator transaction binding the contract method 0xd8025ab4.
//
// Solidity: function layer1EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime, bool _accessGranted) returns(bool)
func (_PDP *PDPTransactorSession) Layer1EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string, _accessGranted bool) (*types.Transaction, error) {
	return _PDP.Contract.Layer1EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone, _startTime, _endTime, _accessGranted)
}

// Layer2EvaluateAccess is a paid mutator transaction binding the contract method 0x8d9cc27c.
//
// Solidity: function layer2EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime) returns(bool)
func (_PDP *PDPTransactor) Layer2EvaluateAccess(opts *bind.TransactOpts, _id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string) (*types.Transaction, error) {
	return _PDP.contract.Transact(opts, "layer2EvaluateAccess", _id, _model_type, _zone, _startTime, _endTime)
}

// Layer2EvaluateAccess is a paid mutator transaction binding the contract method 0x8d9cc27c.
//
// Solidity: function layer2EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime) returns(bool)
func (_PDP *PDPSession) Layer2EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string) (*types.Transaction, error) {
	return _PDP.Contract.Layer2EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone, _startTime, _endTime)
}

// Layer2EvaluateAccess is a paid mutator transaction binding the contract method 0x8d9cc27c.
//
// Solidity: function layer2EvaluateAccess(uint256 _id, string _model_type, int256 _zone, string _startTime, string _endTime) returns(bool)
func (_PDP *PDPTransactorSession) Layer2EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int, _startTime string, _endTime string) (*types.Transaction, error) {
	return _PDP.Contract.Layer2EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone, _startTime, _endTime)
}

// Layer3EvaluateAccess is a paid mutator transaction binding the contract method 0xb09dde6c.
//
// Solidity: function layer3EvaluateAccess(uint256 _id, string _model_type, int256 _zone) returns(bool)
func (_PDP *PDPTransactor) Layer3EvaluateAccess(opts *bind.TransactOpts, _id *big.Int, _model_type string, _zone *big.Int) (*types.Transaction, error) {
	return _PDP.contract.Transact(opts, "layer3EvaluateAccess", _id, _model_type, _zone)
}

// Layer3EvaluateAccess is a paid mutator transaction binding the contract method 0xb09dde6c.
//
// Solidity: function layer3EvaluateAccess(uint256 _id, string _model_type, int256 _zone) returns(bool)
func (_PDP *PDPSession) Layer3EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int) (*types.Transaction, error) {
	return _PDP.Contract.Layer3EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone)
}

// Layer3EvaluateAccess is a paid mutator transaction binding the contract method 0xb09dde6c.
//
// Solidity: function layer3EvaluateAccess(uint256 _id, string _model_type, int256 _zone) returns(bool)
func (_PDP *PDPTransactorSession) Layer3EvaluateAccess(_id *big.Int, _model_type string, _zone *big.Int) (*types.Transaction, error) {
	return _PDP.Contract.Layer3EvaluateAccess(&_PDP.TransactOpts, _id, _model_type, _zone)
}

// Layer4EvaluateAccess is a paid mutator transaction binding the contract method 0x57e373b5.
//
// Solidity: function layer4EvaluateAccess(uint256 _entityId) returns(bool)
func (_PDP *PDPTransactor) Layer4EvaluateAccess(opts *bind.TransactOpts, _entityId *big.Int) (*types.Transaction, error) {
	return _PDP.contract.Transact(opts, "layer4EvaluateAccess", _entityId)
}

// Layer4EvaluateAccess is a paid mutator transaction binding the contract method 0x57e373b5.
//
// Solidity: function layer4EvaluateAccess(uint256 _entityId) returns(bool)
func (_PDP *PDPSession) Layer4EvaluateAccess(_entityId *big.Int) (*types.Transaction, error) {
	return _PDP.Contract.Layer4EvaluateAccess(&_PDP.TransactOpts, _entityId)
}

// Layer4EvaluateAccess is a paid mutator transaction binding the contract method 0x57e373b5.
//
// Solidity: function layer4EvaluateAccess(uint256 _entityId) returns(bool)
func (_PDP *PDPTransactorSession) Layer4EvaluateAccess(_entityId *big.Int) (*types.Transaction, error) {
	return _PDP.Contract.Layer4EvaluateAccess(&_PDP.TransactOpts, _entityId)
}

// PDPAccessEvaluatedIterator is returned from FilterAccessEvaluated and is used to iterate over the raw logs and unpacked data for AccessEvaluated events raised by the PDP contract.
type PDPAccessEvaluatedIterator struct {
	Event *PDPAccessEvaluated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPAccessEvaluatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPAccessEvaluated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPAccessEvaluated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPAccessEvaluatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPAccessEvaluatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPAccessEvaluated represents a AccessEvaluated event raised by the PDP contract.
type PDPAccessEvaluated struct {
	EntityId      *big.Int
	AccessGranted bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAccessEvaluated is a free log retrieval operation binding the contract event 0xb79696d005aad537e335b7484a22a2a95e6210165a0471175c06351d2e79ae9d.
//
// Solidity: event AccessEvaluated(uint256 indexed entityId, bool accessGranted)
func (_PDP *PDPFilterer) FilterAccessEvaluated(opts *bind.FilterOpts, entityId []*big.Int) (*PDPAccessEvaluatedIterator, error) {

	var entityIdRule []interface{}
	for _, entityIdItem := range entityId {
		entityIdRule = append(entityIdRule, entityIdItem)
	}

	logs, sub, err := _PDP.contract.FilterLogs(opts, "AccessEvaluated", entityIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPAccessEvaluatedIterator{contract: _PDP.contract, event: "AccessEvaluated", logs: logs, sub: sub}, nil
}

// WatchAccessEvaluated is a free log subscription operation binding the contract event 0xb79696d005aad537e335b7484a22a2a95e6210165a0471175c06351d2e79ae9d.
//
// Solidity: event AccessEvaluated(uint256 indexed entityId, bool accessGranted)
func (_PDP *PDPFilterer) WatchAccessEvaluated(opts *bind.WatchOpts, sink chan<- *PDPAccessEvaluated, entityId []*big.Int) (event.Subscription, error) {

	var entityIdRule []interface{}
	for _, entityIdItem := range entityId {
		entityIdRule = append(entityIdRule, entityIdItem)
	}

	logs, sub, err := _PDP.contract.WatchLogs(opts, "AccessEvaluated", entityIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPAccessEvaluated)
				if err := _PDP.contract.UnpackLog(event, "AccessEvaluated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessEvaluated is a log parse operation binding the contract event 0xb79696d005aad537e335b7484a22a2a95e6210165a0471175c06351d2e79ae9d.
//
// Solidity: event AccessEvaluated(uint256 indexed entityId, bool accessGranted)
func (_PDP *PDPFilterer) ParseAccessEvaluated(log types.Log) (*PDPAccessEvaluated, error) {
	event := new(PDPAccessEvaluated)
	if err := _PDP.contract.UnpackLog(event, "AccessEvaluated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
